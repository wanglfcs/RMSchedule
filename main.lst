                                                        // BEEHIVEV2 GCC 2009.11.24.13.22
                                                        // ------------------------------------------------------------
                                                        // Standard as definitions
                                                        
$0                                                      zero = $0    // fixed zero
$1                                                      r1 = $1      // function return value
$2                                                      r2 = $2      // not callee save
$3                                                      r3 = $3      // not callee save, function argument 1
$4                                                      r4 = $4      // not callee save, function argument 2
$5                                                      r5 = $5      // not callee save, function argument 3
$6                                                      r6 = $6      // not callee save, function argument 4
$7                                                      r7 = $7      // not callee save, function argument 5
$8                                                      r8 = $8      // not callee save, function argument 6
$9                                                      r9 = $9      // callee save
$10                                                     r10 = $10    // callee save
$11                                                     r11 = $11    // callee save
$12                                                     r12 = $12    // callee save
$13                                                     r13 = $13    // callee save
$14                                                     r14 = $14    // callee save
$15                                                     r15 = $15    // callee save
$16                                                     r16 = $16    // callee save
$17                                                     r17 = $17    // callee save
$18                                                     r18 = $18    // callee save
$19                                                     r19 = $19    // callee save
$20                                                     r20 = $20    // callee save
$21                                                     r21 = $21    // callee save
$22                                                     r22 = $22    // callee save
$23                                                     fp = $23     // callee save, frame pointer
$24                                                     t1 = $24     // not callee save, temporary 1, not avail for reg alloc
$25                                                     t2 = $25     // not callee save, temporary 2, not avail for reg alloc
$26                                                     t3 = $26     // not callee save, temporary 3, not avail for reg alloc
$27                                                     p1 = $27     // not callee save, platform 1, not avail for reg alloc
$28                                                     sp = $28     // callee save, stack pointer
$29                                                     vb = $29     // not callee save, rw & rb only, not avail for reg alloc
                                                        
  00000000                                                  .assume   zero,0
                                                        
                                                        // ------------------------------------------------------------
                                                                .file   "binary_search_tree.c"
                                                        // BEEHIVEV2 GCC 2009.11.24.13.22
                                                        // ------------------------------------------------------------
                                                        // Standard as definitions
                                                        
*** task_scheduler.s line 5 char 13: symbol "zero" is already defined
                                                        zero = $0    // fixed zero
*** task_scheduler.s line 6 char 13: symbol "r1" is already defined
                                                        r1 = $1      // function return value
*** task_scheduler.s line 7 char 13: symbol "r2" is already defined
                                                        r2 = $2      // not callee save
*** task_scheduler.s line 8 char 13: symbol "r3" is already defined
                                                        r3 = $3      // not callee save, function argument 1
*** task_scheduler.s line 9 char 13: symbol "r4" is already defined
                                                        r4 = $4      // not callee save, function argument 2
*** task_scheduler.s line 10 char 13: symbol "r5" is already defined
                                                        r5 = $5      // not callee save, function argument 3
*** task_scheduler.s line 11 char 13: symbol "r6" is already defined
                                                        r6 = $6      // not callee save, function argument 4
*** task_scheduler.s line 12 char 13: symbol "r7" is already defined
                                                        r7 = $7      // not callee save, function argument 5
*** task_scheduler.s line 13 char 13: symbol "r8" is already defined
                                                        r8 = $8      // not callee save, function argument 6
*** task_scheduler.s line 14 char 13: symbol "r9" is already defined
                                                        r9 = $9      // callee save
*** task_scheduler.s line 15 char 13: symbol "r10" is already defined
                                                        r10 = $10    // callee save
*** task_scheduler.s line 16 char 13: symbol "r11" is already defined
                                                        r11 = $11    // callee save
*** task_scheduler.s line 17 char 13: symbol "r12" is already defined
                                                        r12 = $12    // callee save
*** task_scheduler.s line 18 char 13: symbol "r13" is already defined
                                                        r13 = $13    // callee save
*** task_scheduler.s line 19 char 13: symbol "r14" is already defined
                                                        r14 = $14    // callee save
*** task_scheduler.s line 20 char 13: symbol "r15" is already defined
                                                        r15 = $15    // callee save
*** task_scheduler.s line 21 char 13: symbol "r16" is already defined
                                                        r16 = $16    // callee save
*** task_scheduler.s line 22 char 13: symbol "r17" is already defined
                                                        r17 = $17    // callee save
*** task_scheduler.s line 23 char 13: symbol "r18" is already defined
                                                        r18 = $18    // callee save
*** task_scheduler.s line 24 char 13: symbol "r19" is already defined
                                                        r19 = $19    // callee save
*** task_scheduler.s line 25 char 13: symbol "r20" is already defined
                                                        r20 = $20    // callee save
*** task_scheduler.s line 26 char 13: symbol "r21" is already defined
                                                        r21 = $21    // callee save
*** task_scheduler.s line 27 char 13: symbol "r22" is already defined
                                                        r22 = $22    // callee save
*** task_scheduler.s line 28 char 13: symbol "fp" is already defined
                                                        fp = $23     // callee save, frame pointer
*** task_scheduler.s line 29 char 13: symbol "t1" is already defined
                                                        t1 = $24     // not callee save, temporary 1, not avail for reg alloc
*** task_scheduler.s line 30 char 13: symbol "t2" is already defined
                                                        t2 = $25     // not callee save, temporary 2, not avail for reg alloc
*** task_scheduler.s line 31 char 13: symbol "t3" is already defined
                                                        t3 = $26     // not callee save, temporary 3, not avail for reg alloc
*** task_scheduler.s line 32 char 13: symbol "p1" is already defined
                                                        p1 = $27     // not callee save, platform 1, not avail for reg alloc
*** task_scheduler.s line 33 char 13: symbol "sp" is already defined
                                                        sp = $28     // callee save, stack pointer
*** task_scheduler.s line 34 char 13: symbol "vb" is already defined
                                                        vb = $29     // not callee save, rw & rb only, not avail for reg alloc
                                                        
*** task_scheduler.s line 36 char 19: register $0 already has an assumed value
*** task_scheduler.s line 36 char 19: expecting end of statement, found ","
                                                            .assume   zero,0
                                                        
                                                        // ------------------------------------------------------------
                                                                .file   "task_scheduler.c"
                                                                .ident  "GCC: (GNU) 4.3.3"
                                                        // BEEHIVEV2 GCC 2009.11.24.13.22
                                                        // ------------------------------------------------------------
                                                        // Standard as definitions
                                                        
*** main.s line 5 char 13: symbol "zero" is already defined
                                                        zero = $0    // fixed zero
*** main.s line 6 char 13: symbol "r1" is already defined
                                                        r1 = $1      // function return value
*** main.s line 7 char 13: symbol "r2" is already defined
                                                        r2 = $2      // not callee save
*** main.s line 8 char 13: symbol "r3" is already defined
                                                        r3 = $3      // not callee save, function argument 1
*** main.s line 9 char 13: symbol "r4" is already defined
                                                        r4 = $4      // not callee save, function argument 2
*** main.s line 10 char 13: symbol "r5" is already defined
                                                        r5 = $5      // not callee save, function argument 3
*** main.s line 11 char 13: symbol "r6" is already defined
                                                        r6 = $6      // not callee save, function argument 4
*** main.s line 12 char 13: symbol "r7" is already defined
                                                        r7 = $7      // not callee save, function argument 5
*** main.s line 13 char 13: symbol "r8" is already defined
                                                        r8 = $8      // not callee save, function argument 6
*** main.s line 14 char 13: symbol "r9" is already defined
                                                        r9 = $9      // callee save
*** main.s line 15 char 13: symbol "r10" is already defined
                                                        r10 = $10    // callee save
*** main.s line 16 char 13: symbol "r11" is already defined
                                                        r11 = $11    // callee save
*** main.s line 17 char 13: symbol "r12" is already defined
                                                        r12 = $12    // callee save
*** main.s line 18 char 13: symbol "r13" is already defined
                                                        r13 = $13    // callee save
*** main.s line 19 char 13: symbol "r14" is already defined
                                                        r14 = $14    // callee save
*** main.s line 20 char 13: symbol "r15" is already defined
                                                        r15 = $15    // callee save
*** main.s line 21 char 13: symbol "r16" is already defined
                                                        r16 = $16    // callee save
*** main.s line 22 char 13: symbol "r17" is already defined
                                                        r17 = $17    // callee save
*** main.s line 23 char 13: symbol "r18" is already defined
                                                        r18 = $18    // callee save
*** main.s line 24 char 13: symbol "r19" is already defined
                                                        r19 = $19    // callee save
*** main.s line 25 char 13: symbol "r20" is already defined
                                                        r20 = $20    // callee save
*** main.s line 26 char 13: symbol "r21" is already defined
                                                        r21 = $21    // callee save
*** main.s line 27 char 13: symbol "r22" is already defined
                                                        r22 = $22    // callee save
*** main.s line 28 char 13: symbol "fp" is already defined
                                                        fp = $23     // callee save, frame pointer
*** main.s line 29 char 13: symbol "t1" is already defined
                                                        t1 = $24     // not callee save, temporary 1, not avail for reg alloc
*** main.s line 30 char 13: symbol "t2" is already defined
                                                        t2 = $25     // not callee save, temporary 2, not avail for reg alloc
*** main.s line 31 char 13: symbol "t3" is already defined
                                                        t3 = $26     // not callee save, temporary 3, not avail for reg alloc
*** main.s line 32 char 13: symbol "p1" is already defined
                                                        p1 = $27     // not callee save, platform 1, not avail for reg alloc
*** main.s line 33 char 13: symbol "sp" is already defined
                                                        sp = $28     // callee save, stack pointer
*** main.s line 34 char 13: symbol "vb" is already defined
                                                        vb = $29     // not callee save, rw & rb only, not avail for reg alloc
                                                        
*** main.s line 36 char 19: register $0 already has an assumed value
*** main.s line 36 char 19: expecting end of statement, found ","
                                                            .assume   zero,0
                                                        
                                                        // ------------------------------------------------------------
                                                                .file   "main.c"
                                                                .code
                                                                .alignw 1
                                                                .globl  _mc_main
                                                                .type   _mc_main, @function
C 00000000                                              _mc_main:
C 00000000 e7001246  AQW = $28 = $28 SUB 00000004               aqw_sub     sp,sp,4
C 00000001 f7c00305  WQ = $31 = LINK OR 00000000                ld          wq,link
C 00000002 e7000207  AQR = $28 = $28 ADD 00000000               aqr_add     sp,sp,0
C 00000003 e7001205  $28 = $28 ADD 00000004                     add         sp,sp,4
C 00000004 e800030c  J RQ OR 00000000                           j           rq
                                                                .size   _mc_main, .-_mc_main
                                                                .data
D 00000000                                              .LC0:
D 00000000 2a  2a  2a  2a                                       .string "**************************Task 3 Done**************************\n"
D 00000004 2a  2a  2a  2a                               
D 00000008 2a  2a  2a  2a                               
D 0000000c 2a  2a  2a  2a                               
D 00000010 2a  2a  2a  2a                               
D 00000014 2a  2a  2a  2a                               
D 00000018 2a  2a  54  61                               
D 0000001c 73  6b  20  33                               
D 00000020 20  44  6f  6e                               
D 00000024 65  2a  2a  2a                               
D 00000028 2a  2a  2a  2a                               
D 0000002c 2a  2a  2a  2a                               
D 00000030 2a  2a  2a  2a                               
D 00000034 2a  2a  2a  2a                               
D 00000038 2a  2a  2a  2a                               
D 0000003c 2a  2a  2a  0a                               
D 00000040 00                                           
                                                                .code
                                                                .alignw 1
                                                                .globl  _task_3
                                                                .type   _task_3, @function
C 00000005                                              _task_3:
C 00000005 e7001246  AQW = $28 = $28 SUB 00000004               aqw_sub     sp,sp,4
C 00000006 f7c00305  WQ = $31 = LINK OR 00000000                ld          wq,link
C 00000007 e7001246  AQW = $28 = $28 SUB 00000004               aqw_sub     sp,sp,4
C 00000008 4fc00305  WQ = $31 = $9 OR 00000000                  ld          wq,r9
C 00000009 00000003* LINK = 00000000                            long_ld     r9,_search_node
C 0000000a f2400305* $9 = LINK OR 00000000              
C 0000000b 01001605  $4 = $0 ADD 00000005                       ld          r4,5
C 0000000c 00000003* LINK = 00000000                            aqr_long_ld vb,_s_search_tree
C 0000000d f7400307* AQR = $29 = LINK OR 00000000       
C 0000000e e8c00305  $3 = RQ OR 00000000                        ld          r3,rq
C 0000000f 48000308  CALL $9 OR 00000000                        call        r9
C 00000010 01001a05  $4 = $0 ADD 00000006                       ld          r4,6
C 00000011 00000003* LINK = 00000000                            aqr_long_ld vb,_s_search_tree
C 00000012 f7400307* AQR = $29 = LINK OR 00000000       
C 00000013 e8c00305  $3 = RQ OR 00000000                        ld          r3,rq
C 00000014 48000308  CALL $9 OR 00000000                        call        r9
C 00000015 01003205  $4 = $0 ADD 0000000c                       ld          r4,12
C 00000016 00000003* LINK = 00000000                            aqr_long_ld vb,_s_search_tree
C 00000017 f7400307* AQR = $29 = LINK OR 00000000       
C 00000018 e8c00305  $3 = RQ OR 00000000                        ld          r3,rq
C 00000019 48000308  CALL $9 OR 00000000                        call        r9
C 0000001a 00000003* LINK = 00000000                            aqr_long_ld vb,_processor
C 0000001b f7400307* AQR = $29 = LINK OR 00000000       
C 0000001c e8c00305  $3 = RQ OR 00000000                        ld          r3,rq
C 0000001d 00000003* LINK = 00000000                            long_call   _task_done
C 0000001e f0000308* CALL LINK OR 00000000              
C 0000001f 00000003* LINK = 00000000                            long_ld     r9,_set_mask
C 00000020 f2400305* $9 = LINK OR 00000000              
C 00000021 00c00605  $3 = $0 ADD 00000001                       ld          r3,1
C 00000022 48000308  CALL $9 OR 00000000                        call        r9
C 00000023 e7001246  AQW = $28 = $28 SUB 00000004               aqw_sub     sp,sp,4
C 00000024 00000003* LINK = 00000000                            long_ld     wq,.LC0
C 00000025 f7c00305* WQ = $31 = LINK OR 00000000        
C 00000026 00000003* LINK = 00000000                            long_call   _printf
C 00000027 f0000308* CALL LINK OR 00000000              
C 00000028 00c000c5  $3 = $0 ANDN $0                            ld          r3,0
C 00000029 48000308  CALL $9 OR 00000000                        call        r9
C 0000002a e7001205  $28 = $28 ADD 00000004                     add         sp,sp,4
C 0000002b                                              .L4:
C 0000002b f800020c  J PC ADD 00000000                          j           .L4
                                                                .size   _task_3, .-_task_3
                                                                .data
D 00000041                                              .LC1:
D 00000041 2a  2a  2a                                           .string "**************************Task 2 Done**************************\n"
D 00000044 2a  2a  2a  2a                               
D 00000048 2a  2a  2a  2a                               
D 0000004c 2a  2a  2a  2a                               
D 00000050 2a  2a  2a  2a                               
D 00000054 2a  2a  2a  2a                               
D 00000058 2a  2a  2a  54                               
D 0000005c 61  73  6b  20                               
D 00000060 32  20  44  6f                               
D 00000064 6e  65  2a  2a                               
D 00000068 2a  2a  2a  2a                               
D 0000006c 2a  2a  2a  2a                               
D 00000070 2a  2a  2a  2a                               
D 00000074 2a  2a  2a  2a                               
D 00000078 2a  2a  2a  2a                               
D 0000007c 2a  2a  2a  2a                               
D 00000080 0a  00                                       
                                                                .code
                                                                .alignw 1
                                                                .globl  _task_2
                                                                .type   _task_2, @function
C 0000002c                                              _task_2:
C 0000002c e7001246  AQW = $28 = $28 SUB 00000004               aqw_sub     sp,sp,4
C 0000002d f7c00305  WQ = $31 = LINK OR 00000000                ld          wq,link
C 0000002e e7001246  AQW = $28 = $28 SUB 00000004               aqw_sub     sp,sp,4
C 0000002f 4fc00305  WQ = $31 = $9 OR 00000000                  ld          wq,r9
C 00000030 00000003* LINK = 00000000                            long_ld     r9,_insert
C 00000031 f2400305* $9 = LINK OR 00000000              
C 00000032 01003a05  $4 = $0 ADD 0000000e                       ld          r4,14
C 00000033 00000003* LINK = 00000000                            aqr_long_ld vb,_s_search_tree
C 00000034 f7400307* AQR = $29 = LINK OR 00000000       
C 00000035 e8c00305  $3 = RQ OR 00000000                        ld          r3,rq
C 00000036 48000308  CALL $9 OR 00000000                        call        r9
C 00000037 01003e05  $4 = $0 ADD 0000000f                       ld          r4,15
C 00000038 00000003* LINK = 00000000                            aqr_long_ld vb,_s_search_tree
C 00000039 f7400307* AQR = $29 = LINK OR 00000000       
C 0000003a e8c00305  $3 = RQ OR 00000000                        ld          r3,rq
C 0000003b 48000308  CALL $9 OR 00000000                        call        r9
C 0000003c 01000a05  $4 = $0 ADD 00000002                       ld          r4,2
C 0000003d 00000003* LINK = 00000000                            aqr_long_ld vb,_s_search_tree
C 0000003e f7400307* AQR = $29 = LINK OR 00000000       
C 0000003f e8c00305  $3 = RQ OR 00000000                        ld          r3,rq
C 00000040 48000308  CALL $9 OR 00000000                        call        r9
C 00000041 00000003* LINK = 00000000                            long_ld     r9,_delete
C 00000042 f2400305* $9 = LINK OR 00000000              
C 00000043 01003a05  $4 = $0 ADD 0000000e                       ld          r4,14
C 00000044 00000003* LINK = 00000000                            aqr_long_ld vb,_s_search_tree
C 00000045 f7400307* AQR = $29 = LINK OR 00000000       
C 00000046 e8c00305  $3 = RQ OR 00000000                        ld          r3,rq
C 00000047 48000308  CALL $9 OR 00000000                        call        r9
C 00000048 01003e05  $4 = $0 ADD 0000000f                       ld          r4,15
C 00000049 00000003* LINK = 00000000                            aqr_long_ld vb,_s_search_tree
C 0000004a f7400307* AQR = $29 = LINK OR 00000000       
C 0000004b e8c00305  $3 = RQ OR 00000000                        ld          r3,rq
C 0000004c 48000308  CALL $9 OR 00000000                        call        r9
C 0000004d 01000a05  $4 = $0 ADD 00000002                       ld          r4,2
C 0000004e 00000003* LINK = 00000000                            aqr_long_ld vb,_s_search_tree
C 0000004f f7400307* AQR = $29 = LINK OR 00000000       
C 00000050 e8c00305  $3 = RQ OR 00000000                        ld          r3,rq
C 00000051 48000308  CALL $9 OR 00000000                        call        r9
C 00000052 00000003* LINK = 00000000                            aqr_long_ld vb,_processor
C 00000053 f7400307* AQR = $29 = LINK OR 00000000       
C 00000054 e8c00305  $3 = RQ OR 00000000                        ld          r3,rq
C 00000055 00000003* LINK = 00000000                            long_call   _task_done
C 00000056 f0000308* CALL LINK OR 00000000              
C 00000057 00000003* LINK = 00000000                            long_ld     r9,_set_mask
C 00000058 f2400305* $9 = LINK OR 00000000              
C 00000059 00c00605  $3 = $0 ADD 00000001                       ld          r3,1
C 0000005a 48000308  CALL $9 OR 00000000                        call        r9
C 0000005b e7001246  AQW = $28 = $28 SUB 00000004               aqw_sub     sp,sp,4
C 0000005c 00000043* LINK = 00000040                            long_ld     wq,.LC1
C 0000005d f7c00705* WQ = $31 = LINK OR 00000001        
C 0000005e 00000003* LINK = 00000000                            long_call   _printf
C 0000005f f0000308* CALL LINK OR 00000000              
C 00000060 00c000c5  $3 = $0 ANDN $0                            ld          r3,0
C 00000061 48000308  CALL $9 OR 00000000                        call        r9
C 00000062 e7001205  $28 = $28 ADD 00000004                     add         sp,sp,4
C 00000063                                              .L8:
C 00000063 f800020c  J PC ADD 00000000                          j           .L8
                                                                .size   _task_2, .-_task_2
                                                                .data
D 00000082                                              .LC2:
D 00000082 2a  2a                                               .string "**************************Task 1 Done**************************\n"
D 00000084 2a  2a  2a  2a                               
D 00000088 2a  2a  2a  2a                               
D 0000008c 2a  2a  2a  2a                               
D 00000090 2a  2a  2a  2a                               
D 00000094 2a  2a  2a  2a                               
D 00000098 2a  2a  2a  2a                               
D 0000009c 54  61  73  6b                               
D 000000a0 20  31  20  44                               
D 000000a4 6f  6e  65  2a                               
D 000000a8 2a  2a  2a  2a                               
D 000000ac 2a  2a  2a  2a                               
D 000000b0 2a  2a  2a  2a                               
D 000000b4 2a  2a  2a  2a                               
D 000000b8 2a  2a  2a  2a                               
D 000000bc 2a  2a  2a  2a                               
D 000000c0 2a  0a  00                                   
                                                                .code
                                                                .alignw 1
                                                                .globl  _task_1
                                                                .type   _task_1, @function
C 00000064                                              _task_1:
C 00000064 e7001246  AQW = $28 = $28 SUB 00000004               aqw_sub     sp,sp,4
C 00000065 f7c00305  WQ = $31 = LINK OR 00000000                ld          wq,link
C 00000066 e7001246  AQW = $28 = $28 SUB 00000004               aqw_sub     sp,sp,4
C 00000067 4fc00305  WQ = $31 = $9 OR 00000000                  ld          wq,r9
C 00000068 00000003* LINK = 00000000                            long_ld     r9,_reverse_integer
C 00000069 f2400305* $9 = LINK OR 00000000              
C 0000006a 075bcd13  LINK = 075bcd10                            long_ld     r3,123456789
C 0000006b f0c01705  $3 = LINK OR 00000005              
C 0000006c 48000308  CALL $9 OR 00000000                        call        r9
C 0000006d f8a432e3  LINK = f8a432e0                            long_ld     r3,-123456789
C 0000006e f0c02f05  $3 = LINK OR 0000000b              
C 0000006f 48000308  CALL $9 OR 00000000                        call        r9
C 00000070 00c000c5  $3 = $0 ANDN $0                            ld          r3,0
C 00000071 48000308  CALL $9 OR 00000000                        call        r9
C 00000072 00cfa205  $3 = $0 ADD 000003e8                       ld          r3,1000
C 00000073 48000308  CALL $9 OR 00000000                        call        r9
C 00000074 00cf9f45  $3 = $0 ORN 000003e7                       orn         r3,zero,999
C 00000075 48000308  CALL $9 OR 00000000                        call        r9
C 00000076 00000003* LINK = 00000000                            aqr_long_ld vb,_processor
C 00000077 f7400307* AQR = $29 = LINK OR 00000000       
C 00000078 e8c00305  $3 = RQ OR 00000000                        ld          r3,rq
C 00000079 00000003* LINK = 00000000                            long_call   _task_done
C 0000007a f0000308* CALL LINK OR 00000000              
C 0000007b 00000003* LINK = 00000000                            long_ld     r9,_set_mask
C 0000007c f2400305* $9 = LINK OR 00000000              
C 0000007d 00c00605  $3 = $0 ADD 00000001                       ld          r3,1
C 0000007e 48000308  CALL $9 OR 00000000                        call        r9
C 0000007f e7001246  AQW = $28 = $28 SUB 00000004               aqw_sub     sp,sp,4
C 00000080 00000083* LINK = 00000080                            long_ld     wq,.LC2
C 00000081 f7c00b05* WQ = $31 = LINK OR 00000002        
C 00000082 00000003* LINK = 00000000                            long_call   _printf
C 00000083 f0000308* CALL LINK OR 00000000              
C 00000084 00c000c5  $3 = $0 ANDN $0                            ld          r3,0
C 00000085 48000308  CALL $9 OR 00000000                        call        r9
C 00000086 e7001205  $28 = $28 ADD 00000004                     add         sp,sp,4
C 00000087                                              .L11:
C 00000087 f800020c  J PC ADD 00000000                          j           .L11
                                                                .size   _task_1, .-_task_1
                                                                .alignw 1
                                                                .globl  _schedule_task
                                                                .type   _schedule_task, @function
C 00000088                                              _schedule_task:
C 00000088 e7001246  AQW = $28 = $28 SUB 00000004               aqw_sub     sp,sp,4
C 00000089 f7c00305  WQ = $31 = LINK OR 00000000                ld          wq,link
C 0000008a e7001246  AQW = $28 = $28 SUB 00000004               aqw_sub     sp,sp,4
C 0000008b 4fc00305  WQ = $31 = $9 OR 00000000                  ld          wq,r9
C 0000008c e7001246  AQW = $28 = $28 SUB 00000004               aqw_sub     sp,sp,4
C 0000008d 57c00305  WQ = $31 = $10 OR 00000000                 ld          wq,r10
C 0000008e 07400a07  AQR = $29 = $0 ADD 00000002                aqr_add     vb,zero,2
C 0000008f ea800305  $10 = RQ OR 00000000                       ld          r10,rq
C 00000090 00000003* LINK = 00000000                            aqr_long_ld vb,_processor
C 00000091 f7400307* AQR = $29 = LINK OR 00000000       
C 00000092 e9000305  $4 = RQ OR 00000000                        ld          r4,rq
C 00000093 27404207  AQR = $29 = $4 ADD 00000010                aqr_add     vb,r4,16
C 00000094 ea400305  $9 = RQ OR 00000000                        ld          r9,rq
C 00000095 00000003* LINK = 00000000                            aqr_long_ld vb,_timer
C 00000096 f7401307* AQR = $29 = LINK OR 00000004       
C 00000097 e8c00305  $3 = RQ OR 00000000                        ld          r3,rq
C 00000098 00000003* LINK = 00000000                            long_call   _rm_schedule
C 00000099 f0000308* CALL LINK OR 00000000              
C 0000009a 09800305  $6 = $1 OR 00000000                        ld          r6,r1
C 0000009b 4f400445  $29 = $9 SUB $1                            sub         vb,r9,r1
C 0000009c f8008a0a  JZ PC ADD 00000022                         jz          .L14
C 0000009d 50540300  $1 = $10 OR 00000000 LSR 10                lsr         r1,r10,10
C 0000009e 08403e85  $1 = $1 AND 0000000f                       and         r1,r1,15
C 0000009f 08408205  $1 = $1 ADD 00000020                       add         r1,r1,32
C 000000a0 09520301  $5 = $1 OR 00000000 LSL 9                  lsl         r5,r1,9
C 000000a1 4f400245  $29 = $9 SUB 00000000                      sub         vb,r9,0
C 000000a2 f8003a0a  JZ PC ADD 0000000e                         jz          .L15
C 000000a3 29000305  $4 = $5 OR 00000000                        ld          r4,r5
C 000000a4 00c000c5  $3 = $0 ANDN $0                            ld          r3,0
C 000000a5                                              .L16:
C 000000a5 27400307  AQR = $29 = $4 OR 00000000                 aqr_ld      vb,r4
C 000000a6 e8800305  $2 = RQ OR 00000000                        ld          r2,rq
C 000000a7 18402205  $1 = $3 ADD 00000008                       add         r1,r3,8
C 000000a8 08440301  $1 = $1 OR 00000000 LSL 2                  lsl         r1,r1,2
C 000000a9 4f400406  AQW = $29 = $9 ADD $1                      aqw_add     vb,r9,r1
C 000000aa 17c00305  WQ = $31 = $2 OR 00000000                  ld          wq,r2
C 000000ab 18c00605  $3 = $3 ADD 00000001                       add         r3,r3,1
C 000000ac 21001205  $4 = $4 ADD 00000004                       add         r4,r4,4
C 000000ad 00408205  $1 = $0 ADD 00000020                       ld          r1,32
C 000000ae 1f400445  $29 = $3 SUB $1                            sub         vb,r3,r1
C 000000af f8002a4e  JNZ PC SUB 0000000a                        jnz         .L16
C 000000b0                                              .L15:
C 000000b0 37400245  $29 = $6 SUB 00000000                      sub         vb,r6,0
C 000000b1 f800360a  JZ PC ADD 0000000d                         jz          .L14
C 000000b2 008000c5  $2 = $0 ANDN $0                            ld          r2,0
C 000000b3                                              .L17:
C 000000b3 10402205  $1 = $2 ADD 00000008                       add         r1,r2,8
C 000000b4 08440301  $1 = $1 OR 00000000 LSL 2                  lsl         r1,r1,2
C 000000b5 37400407  AQR = $29 = $6 ADD $1                      aqr_add     vb,r6,r1
C 000000b6 e8400305  $1 = RQ OR 00000000                        ld          r1,rq
C 000000b7 2f400306  AQW = $29 = $5 OR 00000000                 aqw_ld      vb,r5
C 000000b8 0fc00305  WQ = $31 = $1 OR 00000000                  ld          wq,r1
C 000000b9 10800605  $2 = $2 ADD 00000001                       add         r2,r2,1
C 000000ba 29401205  $5 = $5 ADD 00000004                       add         r5,r5,4
C 000000bb 00408205  $1 = $0 ADD 00000020                       ld          r1,32
C 000000bc 17400445  $29 = $2 SUB $1                            sub         vb,r2,r1
C 000000bd f8002a4e  JNZ PC SUB 0000000a                        jnz         .L17
C 000000be                                              .L14:
C 000000be 00000003* LINK = 00000000                            aqr_long_ld vb,_timer
C 000000bf f7401307* AQR = $29 = LINK OR 00000004       
C 000000c0 e8400305  $1 = RQ OR 00000000                        ld          r1,rq
C 000000c1 08400605  $1 = $1 ADD 00000001                       add         r1,r1,1
C 000000c2 00000003* LINK = 00000000                            aqw_long_ld vb,_timer
C 000000c3 f7401306* AQW = $29 = LINK OR 00000004       
C 000000c4 0fc00305  WQ = $31 = $1 OR 00000000                  ld          wq,r1
C 000000c5 e7400307  AQR = $29 = $28 OR 00000000                aqr_ld      vb,sp
C 000000c6 ea800305  $10 = RQ OR 00000000                       ld          r10,rq
C 000000c7 e7401207  AQR = $29 = $28 ADD 00000004               aqr_add     vb,sp,4
C 000000c8 ea400305  $9 = RQ OR 00000000                        ld          r9,rq
C 000000c9 e7002205  $28 = $28 ADD 00000008                     add         sp,sp,8
C 000000ca e7000207  AQR = $28 = $28 ADD 00000000               aqr_add     sp,sp,0
C 000000cb e7001205  $28 = $28 ADD 00000004                     add         sp,sp,4
C 000000cc e800030c  J RQ OR 00000000                           j           rq
                                                                .size   _schedule_task, .-_schedule_task
                                                                .alignw 1
                                                                .globl  _handle_interrupt
                                                                .type   _handle_interrupt, @function
C 000000cd                                              _handle_interrupt:
C 000000cd e7001246  AQW = $28 = $28 SUB 00000004               aqw_sub     sp,sp,4
C 000000ce f7c00305  WQ = $31 = LINK OR 00000000                ld          wq,link
C 000000cf 00000003* LINK = 00000000                            long_call   _breakpoint
C 000000d0 f0000308* CALL LINK OR 00000000              
                                                        // APP
                                                        // 100 "main.c" 1
C 000000d1 07c00605  WQ = $31 = $0 ADD 00000001                 ld              wq,1
*** main.s line 265 char 15: improper rw argument
C 000000d2 00006a06  AQW = $0 = $0 ADD 0000001a                 aqw_ld void,26
                                                        // 0 "" 2
                                                        // NO_APP
C 000000d3 00000083* LINK = 00000080                            long_call   _schedule_task
C 000000d4 f0002308* CALL LINK OR 00000008              
                                                        // APP
                                                        // 103 "main.c" 1
C 000000d5 07c000c5  WQ = $31 = $0 ANDN $0                      ld              wq,0
*** main.s line 272 char 15: improper rw argument
C 000000d6 00006a06  AQW = $0 = $0 ADD 0000001a                 aqw_ld void,26
                                                        // 0 "" 2
                                                        // NO_APP
C 000000d7 00000003* LINK = 00000000                            long_call   _returnBreakpoint
C 000000d8 f0000308* CALL LINK OR 00000000              
C 000000d9 e7000207  AQR = $28 = $28 ADD 00000000               aqr_add     sp,sp,0
C 000000da e7001205  $28 = $28 ADD 00000004                     add         sp,sp,4
C 000000db e800030c  J RQ OR 00000000                           j           rq
                                                                .size   _handle_interrupt, .-_handle_interrupt
                                                                .data
D 000000c3                                              .LC3:
D 000000c3 70                                                   .string "p0"
D 000000c4 30  00                                       
D 000000c6                                              .LC4:
D 000000c6 52  4d                                               .string "RM scheduable\n"
D 000000c8 20  73  63  68                               
D 000000cc 65  64  75  61                               
D 000000d0 62  6c  65  0a                               
D 000000d4 00                                           
D 000000d5                                              .LC5:
D 000000d5 4d  6f  6e                                           .string "Monitor RM schedule table"
D 000000d8 69  74  6f  72                               
D 000000dc 20  52  4d  20                               
D 000000e0 73  63  68  65                               
D 000000e4 64  75  6c  65                               
D 000000e8 20  74  61  62                               
D 000000ec 6c  65  00                                   
D 000000ef                                              .LC6:
D 000000ef 25                                                   .string "%d "
D 000000f0 64  20  00                                   
D 000000f3                                              .LC7:
D 000000f3 2a                                                   .string "* "
D 000000f4 20  00                                       
D 000000f6                                              .LC8:
D 000000f6 0a  00                                               .string "\n"
D 000000f8                                              .LC9:
D 000000f8 50  72  65  65                                       .string "Preemptive schedule\n"
D 000000fc 6d  70  74  69                               
D 00000100 76  65  20  73                               
D 00000104 63  68  65  64                               
D 00000108 75  6c  65  0a                               
D 0000010c 00                                           
D 0000010d                                              .LC10:
D 0000010d 43  61  6e                                           .string "Can't schedule by RM\n"
D 00000110 27  74  20  73                               
D 00000114 63  68  65  64                               
D 00000118 75  6c  65  20                               
D 0000011c 62  79  20  52                               
D 00000120 4d  0a  00                                   
                                                                .code
                                                                .alignw 1
                                                                .globl  _init_tasks
                                                                .type   _init_tasks, @function
C 000000dc                                              _init_tasks:
C 000000dc e7001246  AQW = $28 = $28 SUB 00000004               aqw_sub     sp,sp,4
C 000000dd f7c00305  WQ = $31 = LINK OR 00000000                ld          wq,link
C 000000de e7001246  AQW = $28 = $28 SUB 00000004               aqw_sub     sp,sp,4
C 000000df 4fc00305  WQ = $31 = $9 OR 00000000                  ld          wq,r9
C 000000e0 e7001246  AQW = $28 = $28 SUB 00000004               aqw_sub     sp,sp,4
C 000000e1 57c00305  WQ = $31 = $10 OR 00000000                 ld          wq,r10
C 000000e2 e7001246  AQW = $28 = $28 SUB 00000004               aqw_sub     sp,sp,4
C 000000e3 5fc00305  WQ = $31 = $11 OR 00000000                 ld          wq,r11
C 000000e4 e7001246  AQW = $28 = $28 SUB 00000004               aqw_sub     sp,sp,4
C 000000e5 67c00305  WQ = $31 = $12 OR 00000000                 ld          wq,r12
C 000000e6 e7001246  AQW = $28 = $28 SUB 00000004               aqw_sub     sp,sp,4
C 000000e7 6fc00305  WQ = $31 = $13 OR 00000000                 ld          wq,r13
C 000000e8 e7001246  AQW = $28 = $28 SUB 00000004               aqw_sub     sp,sp,4
C 000000e9 77c00305  WQ = $31 = $14 OR 00000000                 ld          wq,r14
C 000000ea 01000e05  $4 = $0 ADD 00000003                       ld          r4,3
C 000000eb 00000143* LINK = 00000140                            long_ld     r3,_tasks
C 000000ec f0c00305* $3 = LINK OR 00000000              
C 000000ed 00000003* LINK = 00000000                            long_call   _init_tasks_priority
C 000000ee f0000308* CALL LINK OR 00000000              
C 000000ef 000001d3* LINK = 000001d0                            aqw_long_ld vb,_tasks+152
C 000000f0 f7402306* AQW = $29 = LINK OR 00000008       
C 000000f1 000000c3* LINK = 000000c0                            long_ld     wq,_handle_interrupt
C 000000f2 f7c03705* WQ = $31 = LINK OR 0000000d        
C 000000f3 000001d3* LINK = 000001d0                            aqw_long_ld vb,_tasks+156
C 000000f4 f7403306* AQW = $29 = LINK OR 0000000c       
C 000000f5 00000063* LINK = 00000060                            long_ld     wq,_task_1
C 000000f6 f7c01305* WQ = $31 = LINK OR 00000004        
C 000000f7 00000273* LINK = 00000270                            aqw_long_ld vb,_tasks+316
C 000000f8 f7403306* AQW = $29 = LINK OR 0000000c       
C 000000f9 000000c3* LINK = 000000c0                            long_ld     wq,_handle_interrupt
C 000000fa f7c03705* WQ = $31 = LINK OR 0000000d        
C 000000fb 00000283* LINK = 00000280                            aqw_long_ld vb,_tasks+320
C 000000fc f7400306* AQW = $29 = LINK OR 00000000       
C 000000fd 00000023* LINK = 00000020                            long_ld     wq,_task_2
C 000000fe f7c03305* WQ = $31 = LINK OR 0000000c        
C 000000ff 00000323* LINK = 00000320                            aqw_long_ld vb,_tasks+480
C 00000100 f7400306* AQW = $29 = LINK OR 00000000       
C 00000101 000000c3* LINK = 000000c0                            long_ld     wq,_handle_interrupt
C 00000102 f7c03705* WQ = $31 = LINK OR 0000000d        
C 00000103 00000323* LINK = 00000320                            aqw_long_ld vb,_tasks+484
C 00000104 f7401306* AQW = $29 = LINK OR 00000004       
C 00000105 00000003* LINK = 00000000                            long_ld     wq,_task_3
C 00000106 f7c01705* WQ = $31 = LINK OR 00000005        
C 00000107 000000c3* LINK = 000000c0                            long_ld     r3,.LC3
C 00000108 f0c00f05* $3 = LINK OR 00000003              
C 00000109 00000003* LINK = 00000000                            long_call   _new_processor
C 0000010a f0000308* CALL LINK OR 00000000              
C 0000010b 0ac00305  $11 = $1 OR 00000000                       ld          r11,r1
C 0000010c 00000003* LINK = 00000000                            long_ld     r9,_push_task
C 0000010d f2400305* $9 = LINK OR 00000000              
C 0000010e 00000143* LINK = 00000140                            long_ld     r4,_tasks
C 0000010f f1000305* $4 = LINK OR 00000000              
C 00000110 08c00305  $3 = $1 OR 00000000                        ld          r3,r1
C 00000111 48000308  CALL $9 OR 00000000                        call        r9
C 00000112 000001e3* LINK = 000001e0                            long_ld     r4,_tasks+164
C 00000113 f1001305* $4 = LINK OR 00000004              
C 00000114 58c00305  $3 = $11 OR 00000000                       ld          r3,r11
C 00000115 48000308  CALL $9 OR 00000000                        call        r9
C 00000116 00000283* LINK = 00000280                            long_ld     r4,_tasks+328
C 00000117 f1002305* $4 = LINK OR 00000008              
C 00000118 58c00305  $3 = $11 OR 00000000                       ld          r3,r11
C 00000119 48000308  CALL $9 OR 00000000                        call        r9
C 0000011a 01000e05  $4 = $0 ADD 00000003                       ld          r4,3
C 0000011b 00000143* LINK = 00000140                            long_ld     r3,_tasks
C 0000011c f0c00305* $3 = LINK OR 00000000              
C 0000011d 00000003* LINK = 00000000                            long_call   _rm_schedulable
C 0000011e f0000308* CALL LINK OR 00000000              
C 0000011f 008000c5  $2 = $0 ANDN $0                            ld          r2,0
C 00000120 16000305  $24 = $2 OR 00000000                       or          t1,r2,0
C 00000121 17400445  $29 = $2 SUB $1                            sub         vb,r2,r1
C 00000122 f8000a0f  JNC PC ADD 00000002                        jnc         .L1x163
C 00000123 c60003c5  $24 = $24 XORN 00000000                    xorn        t1,t1,0
C 00000124                                              .L1x163:
C 00000124 c74005c5  $29 = $24 XORN $1                          xorn        vb,t1,r1
C 00000125 f801620d  JNM PC ADD 00000058                        jnm         .L24
C 00000126 e7001246  AQW = $28 = $28 SUB 00000004               aqw_sub     sp,sp,4
C 00000127 000000c3* LINK = 000000c0                            long_ld     wq,.LC4
C 00000128 f7c01b05* WQ = $31 = LINK OR 00000006        
C 00000129 00000003* LINK = 00000000                            long_ld     r12,_printf
C 0000012a f3000305* $12 = LINK OR 00000000             
C 0000012b 60000308  CALL $12 OR 00000000                       call        r12
C 0000012c e7001246  AQW = $28 = $28 SUB 00000004               aqw_sub     sp,sp,4
C 0000012d 000000d3* LINK = 000000d0                            long_ld     wq,.LC5
C 0000012e f7c01705* WQ = $31 = LINK OR 00000005        
C 0000012f 60000308  CALL $12 OR 00000000                       call        r12
C 00000130 028000c5  $10 = $0 ANDN $0                           ld          r10,0
C 00000131 e7002205  $28 = $28 ADD 00000008                     add         sp,sp,8
C 00000132 00000003* LINK = 00000000                            long_ld     r13,_rm_schedule
C 00000133 f3400305* $13 = LINK OR 00000000             
C 00000134 00000003* LINK = 00000000                            long_ld     r14,_task_done
C 00000135 f3800305* $14 = LINK OR 00000000             
C 00000136 f800360c  J PC ADD 0000000d                          j           .L28
C 00000137                                              .L26:
C 00000137 4f401207  AQR = $29 = $9 ADD 00000004                aqr_add     vb,r9,4
C 00000138 e7001246  AQW = $28 = $28 SUB 00000004               aqw_sub     sp,sp,4
C 00000139 efc00305  WQ = $31 = RQ OR 00000000                  ld          wq,rq
C 0000013a e7001246  AQW = $28 = $28 SUB 00000004               aqw_sub     sp,sp,4
C 0000013b 000000e3* LINK = 000000e0                            long_ld     wq,.LC6
C 0000013c f7c03f05* WQ = $31 = LINK OR 0000000f        
C 0000013d 60000308  CALL $12 OR 00000000                       call        r12
C 0000013e e7002205  $28 = $28 ADD 00000008                     add         sp,sp,8
C 0000013f 52800605  $10 = $10 ADD 00000001                     add         r10,r10,1
C 00000140 00419205  $1 = $0 ADD 00000064                       ld          r1,100
C 00000141 57400445  $29 = $10 SUB $1                           sub         vb,r10,r1
C 00000142 f8007e0a  JZ PC ADD 0000001f                         jz          .L32
C 00000143                                              .L28:
C 00000143 59000305  $4 = $11 OR 00000000                       ld          r4,r11
C 00000144 50c00305  $3 = $10 OR 00000000                       ld          r3,r10
C 00000145 68000308  CALL $13 OR 00000000                       call        r13
C 00000146 0a400305  $9 = $1 OR 00000000                        ld          r9,r1
C 00000147 0f400245  $29 = $1 SUB 00000000                      sub         vb,r1,0
C 00000148 f800420a  JZ PC ADD 00000010                         jz          .L25
C 00000149 0f406207  AQR = $29 = $1 ADD 00000018                aqr_add     vb,r1,24
C 0000014a e8400305  $1 = RQ OR 00000000                        ld          r1,rq
C 0000014b 4f403207  AQR = $29 = $9 ADD 0000000c                aqr_add     vb,r9,12
C 0000014c e8800305  $2 = RQ OR 00000000                        ld          r2,rq
C 0000014d 0e000305  $24 = $1 OR 00000000                       or          t1,r1,0
C 0000014e 0f400845  $29 = $1 SUB $2                            sub         vb,r1,r2
C 0000014f f8000a0f  JNC PC ADD 00000002                        jnc         .L1x188
C 00000150 c60003c5  $24 = $24 XORN 00000000                    xorn        t1,t1,0
C 00000151                                              .L1x188:
C 00000151 c74009c5  $29 = $24 XORN $2                          xorn        vb,t1,r2
C 00000152 f8006e49  JM PC SUB 0000001b                         jm          .L26
C 00000153 4f406206  AQW = $29 = $9 ADD 00000018                aqw_add     vb,r9,24
C 00000154 07c000c5  WQ = $31 = $0 ANDN $0                      ld          wq,0
C 00000155 58c00305  $3 = $11 OR 00000000                       ld          r3,r11
C 00000156 70000308  CALL $14 OR 00000000                       call        r14
C 00000157 f800824c  J PC SUB 00000020                          j           .L26
C 00000158                                              .L25:
C 00000158 e7001246  AQW = $28 = $28 SUB 00000004               aqw_sub     sp,sp,4
C 00000159 000000f3* LINK = 000000f0                            long_ld     wq,.LC7
C 0000015a f7c00f05* WQ = $31 = LINK OR 00000003        
C 0000015b 60000308  CALL $12 OR 00000000                       call        r12
C 0000015c e7001205  $28 = $28 ADD 00000004                     add         sp,sp,4
C 0000015d 52800605  $10 = $10 ADD 00000001                     add         r10,r10,1
C 0000015e 00419205  $1 = $0 ADD 00000064                       ld          r1,100
C 0000015f 57400445  $29 = $10 SUB $1                           sub         vb,r10,r1
C 00000160 f800764e  JNZ PC SUB 0000001d                        jnz         .L28
C 00000161                                              .L32:
C 00000161 e7001246  AQW = $28 = $28 SUB 00000004               aqw_sub     sp,sp,4
C 00000162 000000f3* LINK = 000000f0                            long_ld     wq,.LC8
C 00000163 f7c01b05* WQ = $31 = LINK OR 00000006        
C 00000164 60000308  CALL $12 OR 00000000                       call        r12
C 00000165 e7001246  AQW = $28 = $28 SUB 00000004               aqw_sub     sp,sp,4
C 00000166 000000f3* LINK = 000000f0                            long_ld     wq,.LC9
C 00000167 f7c02305* WQ = $31 = LINK OR 00000008        
C 00000168 60000308  CALL $12 OR 00000000                       call        r12
C 00000169 58c00305  $3 = $11 OR 00000000                       ld          r3,r11
C 0000016a 00000003* LINK = 00000000                            long_call   _dump_processor
C 0000016b f0000308* CALL LINK OR 00000000              
C 0000016c e7002205  $28 = $28 ADD 00000008                     add         sp,sp,8
C 0000016d                                              .L30:
C 0000016d e7400307  AQR = $29 = $28 OR 00000000                aqr_ld      vb,sp
C 0000016e eb800305  $14 = RQ OR 00000000                       ld          r14,rq
C 0000016f e7401207  AQR = $29 = $28 ADD 00000004               aqr_add     vb,sp,4
C 00000170 eb400305  $13 = RQ OR 00000000                       ld          r13,rq
C 00000171 e7402207  AQR = $29 = $28 ADD 00000008               aqr_add     vb,sp,8
C 00000172 eb000305  $12 = RQ OR 00000000                       ld          r12,rq
C 00000173 e7403207  AQR = $29 = $28 ADD 0000000c               aqr_add     vb,sp,12
C 00000174 eac00305  $11 = RQ OR 00000000                       ld          r11,rq
C 00000175 e7404207  AQR = $29 = $28 ADD 00000010               aqr_add     vb,sp,16
C 00000176 ea800305  $10 = RQ OR 00000000                       ld          r10,rq
C 00000177 e7405207  AQR = $29 = $28 ADD 00000014               aqr_add     vb,sp,20
C 00000178 ea400305  $9 = RQ OR 00000000                        ld          r9,rq
C 00000179 e7006205  $28 = $28 ADD 00000018                     add         sp,sp,24
C 0000017a e7000207  AQR = $28 = $28 ADD 00000000               aqr_add     sp,sp,0
C 0000017b e7001205  $28 = $28 ADD 00000004                     add         sp,sp,4
C 0000017c e800030c  J RQ OR 00000000                           j           rq
C 0000017d                                              .L24:
C 0000017d e7001246  AQW = $28 = $28 SUB 00000004               aqw_sub     sp,sp,4
C 0000017e 00000103* LINK = 00000100                            long_ld     wq,.LC10
C 0000017f f7c03705* WQ = $31 = LINK OR 0000000d        
C 00000180 00000003* LINK = 00000000                            long_call   _printf
C 00000181 f0000308* CALL LINK OR 00000000              
C 00000182 e7001205  $28 = $28 ADD 00000004                     add         sp,sp,4
C 00000183 f8005a4c  J PC SUB 00000016                          j           .L30
                                                                .size   _init_tasks, .-_init_tasks
                                                                .data
D 00000123                                              .LC11:
D 00000123 50                                                   .string "Processor1"
D 00000124 72  6f  63  65                               
D 00000128 73  73  6f  72                               
D 0000012c 31  00                                       
                                                                .code
                                                                .alignw 1
                                                                .globl  _mc_init
                                                                .type   _mc_init, @function
C 00000184                                              _mc_init:
C 00000184 e7001246  AQW = $28 = $28 SUB 00000004               aqw_sub     sp,sp,4
C 00000185 f7c00305  WQ = $31 = LINK OR 00000000                ld          wq,link
C 00000186 00000123* LINK = 00000120                            long_ld     r3,.LC11
C 00000187 f0c00f05* $3 = LINK OR 00000003              
C 00000188 00000003* LINK = 00000000                            long_call   _new_processor
C 00000189 f0000308* CALL LINK OR 00000000              
C 0000018a 00000003* LINK = 00000000                            aqw_long_ld vb,_processor
C 0000018b f7400306* AQW = $29 = LINK OR 00000000       
C 0000018c 0fc00305  WQ = $31 = $1 OR 00000000                  ld          wq,r1
C 0000018d 000000d3* LINK = 000000d0                            long_call   _init_tasks
C 0000018e f0003308* CALL LINK OR 0000000c              
C 0000018f 000000c3* LINK = 000000c0                            long_ld     r3,_handle_interrupt
C 00000190 f0c03705* $3 = LINK OR 0000000d              
C 00000191 00000003* LINK = 00000000                            long_call   _set_handlerR
C 00000192 f0000308* CALL LINK OR 00000000              
C 00000193 00002713  LINK = 00002710                            long_ld     r3,10000
C 00000194 f0c00305  $3 = LINK OR 00000000              
C 00000195 00000003* LINK = 00000000                            long_call   _set_timerInterval
C 00000196 f0000308* CALL LINK OR 00000000              
C 00000197 00c000c5  $3 = $0 ANDN $0                            ld          r3,0
C 00000198 00000003* LINK = 00000000                            long_call   _set_mask
C 00000199 f0000308* CALL LINK OR 00000000              
C 0000019a                                              .L34:
C 0000019a f800020c  J PC ADD 00000000                          j           .L34
                                                                .size   _mc_init, .-_mc_init
                                                                .local  _timer
                                                                .comm   _timer,4,4
                                                                .data
D 0000012e                                              .LC12:
D 0000012e 74  61                                               .string "task1"
D 00000130 73  6b  31  00                               
D 00000134                                              .LC13:
D 00000134 74  61  73  6b                                       .string "task2"
D 00000138 32  00                                       
D 0000013a                                              .LC14:
D 0000013a 74  61                                               .string "task3"
D 0000013c 73  6b  33  00                               
                                                                .data
                                                                .alignw 1
                                                                .type   _tasks, @object
                                                                .size   _tasks, 492
D 00000140                                              _tasks:
D 00000140 0000012e*                                            .long   .LC12
D 00000144 00000000                                             .long   0
D 00000148 00000000                                             .long   0
D 0000014c 00000000                                             .long   0
D 00000150 00000000                                             .long   0
D 00000154 00000000                                             .long   0
D 00000158 00000000                                             .long   0
D 0000015c 00  00  00  00                                       .zero   136
D 00000160 00  00  00  00                               
D 00000164 00  00  00  00                               
D 00000168 00  00  00  00                               
D 0000016c 00  00  00  00                               
D 00000170 00  00  00  00                               
D 00000174 00  00  00  00                               
D 00000178 00  00  00  00                               
D 0000017c 00  00  00  00                               
D 00000180 00  00  00  00                               
D 00000184 00  00  00  00                               
D 00000188 00  00  00  00                               
D 0000018c 00  00  00  00                               
D 00000190 00  00  00  00                               
D 00000194 00  00  00  00                               
D 00000198 00  00  00  00                               
D 0000019c 00  00  00  00                               
D 000001a0 00  00  00  00                               
D 000001a4 00  00  00  00                               
D 000001a8 00  00  00  00                               
D 000001ac 00  00  00  00                               
D 000001b0 00  00  00  00                               
D 000001b4 00  00  00  00                               
D 000001b8 00  00  00  00                               
D 000001bc 00  00  00  00                               
D 000001c0 00  00  00  00                               
D 000001c4 00  00  00  00                               
D 000001c8 00  00  00  00                               
D 000001cc 00  00  00  00                               
D 000001d0 00  00  00  00                               
D 000001d4 00  00  00  00                               
D 000001d8 00  00  00  00                               
D 000001dc 00  00  00  00                               
D 000001e0 00  00  00  00                               
D 000001e4 00000134*                                            .long   .LC13
D 000001e8 00000000                                             .long   0
D 000001ec 00000000                                             .long   0
D 000001f0 00000000                                             .long   0
D 000001f4 00000000                                             .long   0
D 000001f8 00000000                                             .long   0
D 000001fc 00000000                                             .long   0
D 00000200 00  00  00  00                                       .zero   136
D 00000204 00  00  00  00                               
D 00000208 00  00  00  00                               
D 0000020c 00  00  00  00                               
D 00000210 00  00  00  00                               
D 00000214 00  00  00  00                               
D 00000218 00  00  00  00                               
D 0000021c 00  00  00  00                               
D 00000220 00  00  00  00                               
D 00000224 00  00  00  00                               
D 00000228 00  00  00  00                               
D 0000022c 00  00  00  00                               
D 00000230 00  00  00  00                               
D 00000234 00  00  00  00                               
D 00000238 00  00  00  00                               
D 0000023c 00  00  00  00                               
D 00000240 00  00  00  00                               
D 00000244 00  00  00  00                               
D 00000248 00  00  00  00                               
D 0000024c 00  00  00  00                               
D 00000250 00  00  00  00                               
D 00000254 00  00  00  00                               
D 00000258 00  00  00  00                               
D 0000025c 00  00  00  00                               
D 00000260 00  00  00  00                               
D 00000264 00  00  00  00                               
D 00000268 00  00  00  00                               
D 0000026c 00  00  00  00                               
D 00000270 00  00  00  00                               
D 00000274 00  00  00  00                               
D 00000278 00  00  00  00                               
D 0000027c 00  00  00  00                               
D 00000280 00  00  00  00                               
D 00000284 00  00  00  00                               
D 00000288 0000013a*                                            .long   .LC14
D 0000028c 00000000                                             .long   0
D 00000290 00000000                                             .long   0
D 00000294 00000000                                             .long   0
D 00000298 00000000                                             .long   0
D 0000029c 00000000                                             .long   0
D 000002a0 00000000                                             .long   0
D 000002a4 00  00  00  00                                       .zero   136
D 000002a8 00  00  00  00                               
D 000002ac 00  00  00  00                               
D 000002b0 00  00  00  00                               
D 000002b4 00  00  00  00                               
D 000002b8 00  00  00  00                               
D 000002bc 00  00  00  00                               
D 000002c0 00  00  00  00                               
D 000002c4 00  00  00  00                               
D 000002c8 00  00  00  00                               
D 000002cc 00  00  00  00                               
D 000002d0 00  00  00  00                               
D 000002d4 00  00  00  00                               
D 000002d8 00  00  00  00                               
D 000002dc 00  00  00  00                               
D 000002e0 00  00  00  00                               
D 000002e4 00  00  00  00                               
D 000002e8 00  00  00  00                               
D 000002ec 00  00  00  00                               
D 000002f0 00  00  00  00                               
D 000002f4 00  00  00  00                               
D 000002f8 00  00  00  00                               
D 000002fc 00  00  00  00                               
D 00000300 00  00  00  00                               
D 00000304 00  00  00  00                               
D 00000308 00  00  00  00                               
D 0000030c 00  00  00  00                               
D 00000310 00  00  00  00                               
D 00000314 00  00  00  00                               
D 00000318 00  00  00  00                               
D 0000031c 00  00  00  00                               
D 00000320 00  00  00  00                               
D 00000324 00  00  00  00                               
D 00000328 00  00  00  00                               
                                                                .local  _processor
                                                                .comm   _processor,4,4
                                                                .comm   _s_search_tree,4,4
                                                                .ident  "GCC: (GNU) 4.3.3"

assume   $0 = 00000000

                        .data + 0000032c     .
                        .text + 00000087     .L11
                        .text + 000000be     .L14
                        .text + 000000b0     .L15
                        .text + 000000a5     .L16
                        .text + 000000b3     .L17
                        .text + 00000124     .L1x163
                        .text + 00000151     .L1x188
                        .text + 0000017d     .L24
                        .text + 00000158     .L25
                        .text + 00000137     .L26
                        .text + 00000143     .L28
                        .text + 0000016d     .L30
                        .text + 00000161     .L32
                        .text + 0000019a     .L34
                        .text + 0000002b     .L4
                        .text + 00000063     .L8
                        .data + 00000000     .LC0
                        .data + 00000041     .LC1
                        .data + 0000010d     .LC10
                        .data + 00000123     .LC11
                        .data + 0000012e     .LC12
                        .data + 00000134     .LC13
                        .data + 0000013a     .LC14
                        .data + 00000082     .LC2
                        .data + 000000c3     .LC3
                        .data + 000000c6     .LC4
                        .data + 000000d5     .LC5
                        .data + 000000ef     .LC6
                        .data + 000000f3     .LC7
                        .data + 000000f6     .LC8
                        .data + 000000f8     .LC9
                             <undefined>  E  _breakpoint
                             <undefined>  E  _delete
                             <undefined>  E  _dump_processor
                        .text + 000000cd  G  _handle_interrupt
                        .text + 000000dc  G  _init_tasks
                             <undefined>  E  _init_tasks_priority
                             <undefined>  E  _insert
                        .text + 00000184  G  _mc_init
                        .text + 00000000  G  _mc_main
                             <undefined>  E  _new_processor
                             <undefined>  E  _printf
                         .bss + 00000000     _processor
                             <undefined>  E  _push_task
                             <undefined>  E  _returnBreakpoint
                             <undefined>  E  _reverse_integer
                             <undefined>  E  _rm_schedulable
                             <undefined>  E  _rm_schedule
             comm data 00000001 00000000  E  _s_search_tree
                        .text + 00000088  G  _schedule_task
                             <undefined>  E  _search_node
                             <undefined>  E  _set_handlerR
                             <undefined>  E  _set_mask
                             <undefined>  E  _set_timerInterval
                        .text + 00000064  G  _task_1
                        .text + 0000002c  G  _task_2
                        .text + 00000005  G  _task_3
                             <undefined>  E  _task_done
                        .data + 00000140     _tasks
                         .bss + 00000004     _timer
                                00000000     code.rota
                                00000001     code.step
                                00000002     data.rota
                                00000004     data.step
                                     $23     fp
                                    link     link
                                     $27     p1
                                      pc     pc
                                      $1     r1
                                     $10     r10
                                     $11     r11
                                     $12     r12
                                     $13     r13
                                     $14     r14
                                     $15     r15
                                     $16     r16
                                     $17     r17
                                     $18     r18
                                     $19     r19
                                      $2     r2
                                     $20     r20
                                     $21     r21
                                     $22     r22
                                      $3     r3
                                      $4     r4
                                      $5     r5
                                      $6     r6
                                      $7     r7
                                      $8     r8
                                      $9     r9
                                      rq     rq
                                     $28     sp
                                     $24     t1
                                     $25     t2
                                     $26     t3
                                     $29     vb
                             <undefined>  E  void
                                      wq     wq
                                      $0     zero
